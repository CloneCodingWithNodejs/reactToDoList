{"version":3,"sources":["components/TodoListTemplate.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","components/Pallet.js","App.js","serviceWorker.js","index.js"],"names":["TodoListTemplate","form","children","pallet","className","id","Form","value","onChange","onCreate","onKeyPress","color","style","type","onClick","TodoItem","this","props","text","checked","onToggle","onRemove","e","stopPropagation","Component","TodoItemList","todos","todoList","map","key","Color","active","background","Pallet","colors","selected","onSelect","colorList","App","state","input","handleRemove","setState","filter","todo","handleToggle","index","findIndex","nextTodos","handleChange","target","handleCreate","concat","handleSelectColor","handleKeyPress","Helmet","name","content","rel","href","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58e6ffe5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoListTemplate.css\";\r\n\r\nconst TodoListTemplate = ({form,children,pallet}) =>{\r\n    return (\r\n        <div  className=\"container\">\r\n            <div className=\"row\">\r\n                 <div id=\"header\" className=\"col\">\r\n                    <span id=\"title\">해야할 일 리스트 with React.js</span>\r\n                    \r\n                 </div>\r\n                 \r\n            </div>\r\n            <div className=\"row\">\r\n                <div id=\"pallet\" className=\"col\">\r\n                   {pallet}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                 <div id=\"middle\" className=\"col\">\r\n                   {form}\r\n                 </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div id=\"bottom\" className=\"col\">\r\n                    {children}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default TodoListTemplate;","import React from \"react\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = ({value,onChange, onCreate, onKeyPress,color}) => {\r\n    return (\r\n        <div id=\"form\">\r\n            <input  value={value} onChange={onChange} onKeyPress={onKeyPress} style={{color : color}} />\r\n            <button id=\"add\" type=\"button\" className=\"btn btn-primary\" onClick={onCreate}>추가하기</button> \r\n        </div>   \r\n       \r\n    );\r\n\r\n};\r\n\r\nexport default Form;","import React, {Component} from \"react\";\r\nimport \"./TodoItem.css\";\r\n\r\nclass TodoItem extends Component { \r\n\r\n    render(){\r\n\r\n        const {text, checked, id, onToggle, onRemove,color} = this.props;\r\n\r\n        return (\r\n\r\n            <div className=\"todo-item\" onClick={()=> onToggle(id)}>\r\n\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    e.stopPropagation(); \r\n                    onRemove(id)}\r\n                }>&times;</div>\r\n                <div style={{color}} className={`todo-text ${checked && 'checked'}`}>\r\n                    <div>{text}</div>\r\n               </div>\r\n\r\n               {\r\n                  checked && (<div className=\"check-mark\">✓</div>)\r\n               }\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default TodoItem;","import React,{ Component } from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\n\r\n\r\nclass TodoItemList extends Component {\r\n\r\n    //todos: todo 객체들이 들어있는 배열 \r\n    //onToggle : 체크박스를 키고 끄는 함수 \r\n    //onRemove : 아이템을 삭제시키는 함수 \r\n\r\n    render(){\r\n        const { todos, onToggle, onRemove } = this.props;\r\n\r\n        const todoList = todos.map(\r\n            ({id, text, checked,color}) => (\r\n            <TodoItem \r\n                id={id}\r\n                text = {text} \r\n                checked = {checked}\r\n                onToggle = {onToggle} \r\n                onRemove = {onRemove}\r\n                key = {id}\r\n                color={color}\r\n            \r\n            \r\n            />\r\n           )\r\n        );\r\n\r\n        return (\r\n            <div>\r\n               {todoList}\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default TodoItemList;","import React from \"react\";\r\nimport \"./Pallet.css\";\r\n\r\n\r\nconst Color = ({ color, active, onClick }) => {\r\n    return (\r\n      <div className={`color ${active && 'active'}`} style={{ background: color}} onClick={onClick}>\r\n      \r\n      </div>\r\n    )\r\n  }\r\n  \r\n  const Pallet = ({colors, selected, onSelect}) => {\r\n    const colorList = colors.map(\r\n      (color) => (<Color color={color} active={selected===color} onClick={() => onSelect(color)} key={color} />)\r\n    );\r\n    return (\r\n      <div className=\"palette\">\r\n        {colorList}\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Pallet;","import React, {Component} from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from \"./components/Form\";\nimport {Helmet} from 'react-helmet';\nimport TodoItemList from './components/TodoItemList';\nimport Pallet from \"./components/Pallet\";\n\n\nconst colors = ['#343a40', '#f03e3e', '#12b886', '#228ae6'];\n\n\nclass App extends Component {\n\n    id = 3 //이미 0,1,2가 존재하므로 3으로 설정 \n\n\n    state = { \n      input: '',\n      todos: [\n        { id : 0, text : '리액트 소개', checked:false},\n        { id : 1, text : 'React', checked:true},\n        { id : 2, text : 'TodoList', checked:false}\n      ],\n      color : '#343a40'\n    }\n\n   \n\n    handleRemove = (id) => {\n      const { todos } = this.state;\n      this.setState({\n        todos : todos.filter(todo=> todo.id !== id )\n\n      });\n\n    }\n\n\n    \n    handleToggle = (id) => {\n      const { todos } = this.state;\n\n      //파라미터로 받을 id를 갖고 몇번째 아이템인지 찾는다 \n      const index = todos.findIndex(todo => todo.id === id);\n      const selected = todos[index]; //선택한 객체 \n\n      const nextTodos = [...todos]; //배열을 복사함 \n\n      //기존의 값들을 복사하고 , checked 값만 덮어 쓰기\n      nextTodos[index] = {\n        ...selected,\n        checked: !selected.checked\n      };  \n\n      this.setState({\n        todos:nextTodos\n      });\n\n\n    }\n\n    handleChange = (e) => {\n      this.setState({\n        input : e.target.value //인풋의 바뀔 값을 뜻함 \n      });\n    }\n\n    handleCreate = () => {\n      const {input, todos,color} = this.state;\n      this.setState({\n        input : '', //인풋을 비운다 \n        //concat을 사용하여 배열에 추가함 \n        todos: todos.concat({\n          id:this.id++,\n          text:input,\n          checked:false,\n          color:color\n        })\n\n      });\n\n    }\n\n    handleSelectColor = (color) => {\n      this.setState({\n        color\n      })\n    }\n\n\n    handleKeyPress = (e) => {\n      //눌려진 키가 Enter면 handleCreate 호출 \n      if(e.key === 'Enter'){\n        this.handleCreate();\n      }\n    }\n  \n  \n  render() {\n      const {input, todos, color} = this.state;\n      const {\n        handleChange,\n        handleCreate,\n        handleKeyPress,\n        handleSelectColor\n      } = this;\n\n\n        return (\n          <div className='application'>\n          <Helmet>\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n          <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css\" /> \n          <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script> \n        \t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.6/umd/popper.min.js\"></script> \n\t        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js\"></script> \n          </Helmet>\n          \n\n          <TodoListTemplate form={<Form color={color} value={input} onKeyPress={handleKeyPress} onChange={handleChange} onCreate={handleCreate} />}\n                pallet =  {<Pallet  colors={colors} selected={color} onSelect={handleSelectColor} />}>\n            <TodoItemList todos={todos} onToggle={this.handleToggle} onRemove={this.handleRemove} />\n          </TodoListTemplate>\n          \n          </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}